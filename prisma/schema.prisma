generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @unique @default(cuid())

  username            String   @unique
  username_history    String   @default("[]")
  username_changed_at DateTime @default(now())

  password String

  email String? @unique

  avatar_url String?

  is_admin Boolean @default(false)

  badges String @default("[{\"name\":\"user\",\"text\":\"User\"}]")

  referrer_profile ReferrerProfile?

  upload_key         String               @unique @default(cuid())
  upload_preferences UploaderPreferences?

  pinned_images String[] @default([])

  images     Image[]
  space_used Int     @default(0)
  max_space  Int     @default(100000000)

  last_login_ip String?

  comments       Comment[]
  image_comments ImageComment[]

  referrals Referral[]

  donated_urls URL[]

  notifications Notification[]

  last_login_at DateTime  @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  ImageReport ImageReport[]

  Tag Tag[]

  CommentReport CommentReport[]
}

model ReferrerProfile {
  id String @unique @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  referral_code String @unique @default(uuid())

  referral_limit Int @default(5)

  referrals Referral[]
}

model UploaderPreferences {
  id     String @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  embed_title  String @default("{{image.name}}")
  embed_author String @default("Uploaded by {{uploader.name}}")
  embed_colour String @default("#e05cd9")

  domain_hack Boolean @default(false)

  urls String[] @default(["jays.pics"])
  subdomains Json     @default("{}")

  effect         String  @default("none")
  effect_overlay String?
}

model Comment {
  id String @unique @default(cuid())

  commenter_id String
  commenter    User   @relation(fields: [commenter_id], references: [id])

  receiver_id String

  content String

  hidden  Boolean
  flagged Boolean

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  CommentReport CommentReport[]
}

model Image {
  id String @unique @default(cuid())

  uploader_id String
  uploader    User   @relation(fields: [uploader_id], references: [id])

  display_name String
  size         Int
  type         String

  uploader_ip String?

  comments ImageComment[]

  privacy ImagePrivacy @default(PUBLIC)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  ImageReport ImageReport[]

  tags ImageTag[]
}

model ImageComment {
  id           String @unique @default(cuid())
  image_id     String
  image        Image  @relation(fields: [image_id], references: [id])
  commenter_id String
  commenter    User   @relation(fields: [commenter_id], references: [id])

  content String

  hidden  Boolean
  flagged Boolean

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Referral {
  referrer_id String
  referrer    ReferrerProfile @relation(fields: [referred_id], references: [userId], map: "referrer")

  referred_id String @unique
  referred    User   @relation(fields: [referred_id], references: [id])

  created_at DateTime @default(now())
}

model Announcement {
  id         String   @unique @default(cuid())
  content    String
  created_at DateTime @default(now())
}

model Log {
  id         String   @unique @default(cuid())
  message    String
  type       LogType
  created_at DateTime @default(now())
}

model URL {
  id              String   @unique @default(cuid())
  donator_id      String
  donator         User?    @relation(fields: [donator_id], references: [id])
  url             String   @unique
  public          Boolean
  last_checked_at DateTime @default(now())
  created_at      DateTime @default(now())
  progress        Progress @default(INPUT)
  zone_id         String   @default("")
  nameservers     String[] @default(["", ""])
}

enum Progress {
  INPUT
  WAITING
  DONE
}

enum LogType {
  ERROR
  DOMAIN_CHECK
}

enum ImagePrivacy {
  PUBLIC
  UNLISTED
  PRIVATE
}

model Notification {
  id          String   @unique @default(cuid())
  receiver_id String
  receiver    User?    @relation(fields: [receiver_id], references: [id])
  content     String
  seen        Boolean  @default(false)
  created_at  DateTime @default(now())
}

model Site {
  id                String  @unique @default(cuid()) // i hate that this is required
  is_upload_blocked Boolean @default(true)
}

enum ImageReportReason {
  SPAM
  COPYRIGHT
  INAPPROPRIATE
  OTHER
}

model ImageReport {
  id          String            @unique @default(cuid())
  image_id    String
  image       Image             @relation(fields: [image_id], references: [id])
  reporter_id String
  reporter    User              @relation(fields: [reporter_id], references: [id])
  reason_type ImageReportReason
  detail      String?
  created_at  DateTime          @default(now())
}

model Tag {
  id         String   @unique @default(cuid())
  name       String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())

  images ImageTag[]

  @@unique([user_id, name])
}

model ImageTag {
  image    Image  @relation(fields: [image_id], references: [id])
  image_id String
  tag      Tag    @relation(fields: [tag_id], references: [id])
  tag_id   String

  @@id([image_id, tag_id])
}

enum CommentReportReason {
  SPAM
  INAPPROPRIATE
  OTHER
}

model CommentReport {
  id          String              @unique @default(cuid())
  comment_id  String
  comment     Comment             @relation(fields: [comment_id], references: [id])
  reporter_id String
  reporter    User                @relation(fields: [reporter_id], references: [id])
  reason_type CommentReportReason
  detail      String?
  created_at  DateTime            @default(now())
}